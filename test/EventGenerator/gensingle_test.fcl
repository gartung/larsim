#
# File:    gensingle_test.fcl
# Brief:   single particle generation test with standard geometry
# Author:  Gianluca Petrillo (petrillo@fnal.gov)
# Date:    February 24th, 2015
# Version: 1.1
# 
# Single particle generation test, with a "neutral" geometry.
#
# Changes:
# 20150224 (petrillo@fnal.gov) [v1.0]
#   original version from prodsingle.fcl, with ArgoNeuT geometry
# 20151002 (petrillo@fnal.gov) [v1.1]
#   using ChannelStatus service
#

#include "services_lartpcdetector.fcl"
#include "channelstatus.fcl"
#include "singles.fcl"

process_name: SinglesGen

services:
{
  # Load the service that manages root files for histograms.
  TFileService:          { fileName: "single_hist.root" }
  TimeTracker:           {}
  RandomNumberGenerator: {} #ART native random number generator
                         @table::lartpcdetector_simulation_services
  ChannelStatusService: @local::standard_channelstatus
}


#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   2           # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics: 
{
  
  producers:
  {
    generator: @local::argoneut_singlep
    rns:       { module_type: "RandomNumberSaver" }
  }
  
  #define the producer and filter modules for this path, order matters, 
  #filters reject all following items.  see lines starting physics.producers below
  simulate: [ rns, generator ]
  
  #define the output stream, there could be more than one if using filters 
  stream1:  [ out1 ]
  
  #trigger_paths is a keyword and contains the paths that modify the art::event, 
  #ie filters and producers
  trigger_paths: [simulate]
  
  #end_paths is a keyword and contains the paths that do not modify the art::Event, 
  #ie analyzers and output streams.  these all run simultaneously
  end_paths:     [stream1]
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
  out1:
  {
    module_type: RootOutput
    fileName:    "single_gen.root" #default file name, can override from command line with -o or --output
  }
}

