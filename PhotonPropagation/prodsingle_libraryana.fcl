#include "services_microboone.fcl"
#include "caldata.fcl"
#include "hitfindermodules.fcl"
#include "singles.fcl"
#include "largeantmodules.fcl"
#include "detsimmodules.fcl"
#include "mccheatermodules.fcl"
#include "opticaldetectormodules.fcl"
#include "photpropmodules.fcl"


process_name: SinglesGen

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "fastOptical_reconstruct_pmt15_3events_qe100_hist_uboone.root" }
  Timing:       {}
  RandomNumberGenerator: {} #ART native random number generator
  user:         @local::microboone_simulation_services
}
services.user.PhotonVisibilityService: @local::standard_photonvisibilityservice_new

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  maxEvents:   3           # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::microboone_singlep	  
   largeant:  @local::microboone_largeant	  
   daq:       @local::microboone_simwire  
   ffthit:    @local::microboone_hitfinder
   caldata:   @local::microboone_calwire	
   backtrack: @local::standard_backtrackerloader
   opdigi:    @local::microboone_opdigi
   ophit:     @local::microboone_ophitfinder
   #ophitfinder:  @local::standard_oplowintensityhitfinder
   opflashfinder: @local::microboone_opflashfinder
   opflashnew:    @local::microboone_opflashnew 
 }

 analyzers:
 {
   libana:    @local::microboone_photonlibraryanalyzer
   largana:   @local::microboone_largeantana
   pmtresponse: @local::microboone_simphotoncounter
   opdigiana: @local::microboone_opdigiana
   ophitana: @local::microboone_ophitana
   opflashana: @local:: microboone_opflashana
 }

 #define the producer and filter modules for this path, order matters, 
 simulate: [ generator ] 
 analyzeIt:  [ libana ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [analyzeIt, stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "fastOptical_reconstruct_pmt15_3events_qe100_gen_uboone.root" #default file name, can override from command line with -o or --output
 }
}

#manually setting parameters
services.user.LArProperties.ScintYield: 24000
#(default in Utilities/larproperties.fcl number of photons per MeV of deposited energy)

services.user.LArProperties.ScintYieldRatio: 0.3
#(default in Utilities/larproperties.fcl)

services.user.LArProperties.ScintByParticleType: true
#(default in Utilities/larproperties.fcl, only used with fast optical simulation)

services.user.LArProperties.EnableCerenkovLight: false
#(default is true in Utilities/larproperties.fcl doesn't work with fast optical simulation

services.user.LArProperties.RayleighEnergies: [ 4.95, 5.69, 6.51, 7.53, 8.50, 9.67, 9.95, 10.57 ]
#(default in Utilities/larproperties.fcl, energy in eV)

services.user.LArProperties.RayleighSpectrum: [ 3790, 1850, 930,  410,  192,  90,   38,   10 ]
#(default in Utilities/larproperties.fcl, length in cm)

services.user.LArProperties.AbsLengthEnergies: [ 4, 5, 6, 7, 8, 9, 10, 11 ]
#(default in Utilities/larproperties.fcl, energy in eV)

services.user.LArProperties.AbsLengthSpectrum: [ 2000., 2000., 2000., 2000., 2000., 2000., 2000., 2000. ]
#(default in Utilities/larproperties.fcl, length in cm)

physics.analyzers.pmtresponse.QuantumEfficiency: 1.00 #0.03
#(default is 0.015 in OpticalDetector/opticaldetectormodules.fcl)

physics.analyzers.pmtresponse.WavelengthCutLow: 0
#(default is 0 in OpticalDetector/opticaldetectormodules.fcl)

physics.analyzers.pmtresponse.WavelengthCutHigh: 1000
#(default is 1000 in OpticalDetector/opticaldetectormodules.fcl)    

# enable optical physics in LArG4
services.user.LArG4Parameters.EnabledPhysics: [ "Em",
                                                "FastOptical",
                                                "SynchrotronAndGN",
                                                "Ion",
                                                "Hadron",
                                                "Decay",
                                                "HadronElastic",
                                                "Stopping",
                                                "NeutronTrackingCut" ]

# enable this custom physics list
services.user.LArG4Parameters.UseCustomPhysics: true

# disable cerenkov light
services.user.LArProperties.EnableCerenkovLight: false


#17.5 < x < 238.8 cm (110.65 center)
#-99 < y < 99.1 cm
#17.5 < z < 1019.3 cm

#in front on PMT15
physics.producers.generator.T0: [500]
physics.producers.generator.X0: [20.]
physics.producers.generator.Y0: [60.]
physics.producers.generator.Z0: [532.]

physics.producers.generator.SigmaX: [0.]
physics.producers.generator.SigmaY: [0.]
physics.producers.generator.SigmaZ: [0.]
physics.producers.generator.PosDist: 0  #0 uniform, 1 gaussian

physics.producers.generator.PDG: [2212]
physics.producers.generator.P0: [0.040]
physics.producers.generator.SigmaP: [0.]
physics.producers.generator.PDist: 1 #0 uniform, 1 gaussian
physics.producers.generator.SigmaThetaXZ: [ 0 ]
physics.producers.generator.SigmaThetaYZ: [ 0 ]

services.user.PhotonVisibilityService.LibraryFile: "PhotonPropagation/LibraryData/lib8984855.root"
