#include "services_microboone.fcl"
#include "singles_microboone.fcl"
#include "largeantmodules_microboone.fcl"
#include "detsimmodules_microboone.fcl"
#include "opticaldetectormodules_microboone.fcl"
#include "lightsource.fcl"


process_name: LibraryBuild





services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "PhotonLibraryFile.root" }
  Timing:       {}
  RandomNumberGenerator: {} #ART native random number generator
  user:         @local::microboone_simulation_services
}


services.user.PhotonVisibilityService: @local::standard_photonvisibilityservice_buildlib
#services.user.BackTracker: ""
#services.user.LArFFT: ""
#services.user.SignalShapingServiceMicroBooNE: ""

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  maxEvents:   240           # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::microboone_lightsource	  
   largeant:  @local::microboone_largeant	  
 }

 analyzers:
 {
   pmtresponse: @local::microboone_simphotoncounter
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ generator, largeant ] 
 analyzeIt:  [ pmtresponse ]
 #define the output stream, there could be more than one if using filters 
 stream1:  [ ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [analyzeIt, stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "single_gen_uboone.root" #default file name, can override from command line with -o or --output
 }
}

# Begin optical specific parts:

# set quantum efficiency supressed scint yield to 0.03 * 24000 
services.user.LArProperties.ScintYield: 72

# enable optical physics in LArG4
services.user.LArG4Parameters.EnabledPhysics: [ "Em", 
						"Optical", 
						"SynchrotronAndGN", 
						"Ion", 
						"Hadron", 
						"Decay", 
						"HadronElastic", 
						"Stopping", 
						"NeutronTrackingCut" ]

# enable this custom physics list
services.user.LArG4Parameters.UseCustomPhysics: true

# do not allow lightsource to write output into root file
physics.producers.generator.FillTree: false

physics.analyzers.pmtresponse.MakeAllPhotonsTree: false
physics.analyzers.pmtresponse.MakeDetectedPhotonsTree: false
physics.analyzers.pmtresponse.MakeOpDetsTree: false
physics.analyzers.pmtresponse.MakeOpDetEventsTree: false

#services.user.Geometry.GDML: "TempGeometry/gdml/microboone.gdml"

# To disable wireplane absorption, uncomment this line
#services.user.LArG4Parameters.OpticalParamModels: ["TransparentPlaneAction"]


services.user.PhotonVisibilityService.UseCryoBoundary: true

services.user.PhotonVisibilityService.NX: 75
services.user.PhotonVisibilityService.NY: 75
services.user.PhotonVisibilityService.NZ: 400

#services.user.PhotonVisibilityService.XMin: 100
#services.user.PhotonVisibilityService.XMax: 110
#services.user.PhotonVisibilityService.YMin: -50
#services.user.PhotonVisibilityService.YMax: -60
#services.user.PhotonVisibilityService.ZMin: 500
#services.user.PhotonVisibilityService.ZMax: 600

physics.producers.generator.FirstVoxel: 1000000
physics.producers.generator.LastVoxel: 1000239
physics.producers.generator.N: 30000
