////////////////////////////////////////////////////////////////////////
// Class:       TextOutAna
// Module Type: analyzer
// File:        TextOutAna_module.cc
//
// Generated at Fri Jul 29 15:37:09 2016 by James Sinclair using artmod
// from cetpkgsupport v1_10_02.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
//#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include "art/Framework/Services/Registry/ServiceHandle.h"
#include "art/Framework/Services/Optional/TFileService.h"
#include "art/Framework/Services/Optional/TFileDirectory.h"

#include "lardata/Utilities/AssociationUtil.h"

//#include "art/Framework/Core/FindManyP.h"
//#include "art/Framework/Core/FindOneP.h"
//#include "art/Persistency/Common/Ptr.h"
//#include "art/Persistency/Common/PtrVector.h"


#include "nusimdata/SimulationBase/MCParticle.h"
#include "nusimdata/SimulationBase/MCTruth.h"
#include "nusimdata/SimulationBase/GTruth.h"
#include "nusimdata/SimulationBase/MCNeutrino.h"
#include "lardataobj/MCBase/MCShower.h"
#include "lardataobj/MCBase/MCTrack.h"

#include <iostream>
#include <vector>
#include <fstream>

#include "TLorentzVector.h"


class TextOutAna;

class TextOutAna : public art::EDAnalyzer {
public:
  explicit TextOutAna(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  TextOutAna(TextOutAna const &) = delete;
  TextOutAna(TextOutAna &&) = delete;
  TextOutAna & operator = (TextOutAna const &) = delete;
  TextOutAna & operator = (TextOutAna &&) = delete;

  // Required functions.
  void analyze(art::Event const & e) override;

  // Selected optional functions.
  void beginJob() override;
  void reconfigure(fhicl::ParameterSet const & p) override;
  void endJob() override;

private:

  // Declare member data here.

};

std::ofstream textFile;

TextOutAna::TextOutAna(fhicl::ParameterSet const & p)
  :
  EDAnalyzer(p)  // ,
 // More initializers here.
{}

void TextOutAna::analyze(art::Event const & e)
{
  // Implementation of required member function here.
  art::Handle<std::vector<simb::MCTruth> > mctruths_h;
  e.getByLabel( "generator", mctruths_h );
  std::vector< art::Ptr<simb::MCTruth> > mctruths;
  art::fill_ptr_vector(mctruths, mctruths_h);

  art::FindManyP<simb::MCParticle> fmMCParticles( mctruths_h, e, "largeant");
  for( unsigned int m = 0; m < mctruths.size(); m++ ) {
    std::vector< art::Ptr<simb::MCParticle> > truthMCParticle = fmMCParticles.at(m);
    std::cerr << "size " << truthMCParticle.size() << std::endl;
    for( unsigned int i =0; i < truthMCParticle.size(); i++ ) {
      for(unsigned int r=0; r<truthMCParticle.at(i)->NumberTrajectoryPoints(); r++) {
	if (truthMCParticle.at(i)->E(r)>0.01){//this is a basic 10keV cut for low E gamma 
        textFile <<  truthMCParticle.at(i)->Vx(r)  << ","<<  truthMCParticle.at(i)->Vy(r) << "," <<  truthMCParticle.at(i)->Vz(r) << "," << i << ","<< m << ","<< truthMCParticle.at(i)->E(r) << std::endl;
	}else {
	  std::cerr << "Energy too low" << std::endl;
	}
      }

    } 
  }
}

void TextOutAna::beginJob()
{

  // Implementation of optional member function here.
  textFile.open("textFile.csv", std::ofstream::out);
  textFile<<"x,y,z,particle,nu,dE"<<std::endl;

}

void TextOutAna::reconfigure(fhicl::ParameterSet const & p)
{
  // Implementation of optional member function here.
}

void TextOutAna::endJob()
{
  // Implementation of optional member function here.
}

DEFINE_ART_MODULE(TextOutAna)
