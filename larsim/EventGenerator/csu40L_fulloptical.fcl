#include "services.fcl"
#include "singles.fcl"
#include "largeantmodules.fcl"
#include "detsimmodules.fcl"
#include "mccheatermodules.fcl"
#include "opticaldetectormodules.fcl"

process_name: SinglesGen

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "single_hist_csu40L.root" }
  Timing:       {}
  RandomNumberGenerator: {} #ART native random number generator
  user:         @local::csu40L_simulation_services
}

 #example change
services.user.PhotonVisibilityService: @local::standard_photonvisibilityservice

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   5        # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::standard_singlep	  
   largeant:  @local::standard_largeant	  
   backtrack: @local::standard_backtrackerloader
 }

 analyzers:
 {
   largana:     @local::standard_largeantana
   pmtresponse: @local::standard_simphotoncounter
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ generator, largeant, backtrack ] 
 analyzeIt:  [ largana, pmtresponse ]
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [analyzeIt, stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "single_gen_csu40L.root" #default file name, can override from command line with -o or --output
 }
}



##### Parameter changes for simulation services #####

# set quantum efficiency supressed scint yield to 0.03 * 24000

services.user.DetectorPropertiesService.ScintYield: 720


# enable optical physics in LArG4
services.user.LArG4Parameters.EnabledPhysics: [ "Em",
                                                "Optical",
                                                "SynchrotronAndGN",
                                                "Ion",
                                                "Hadron",
                                                "Decay",
                                                "HadronElastic",
                                                "Stopping",
                                                "NeutronTrackingCut" ]

# enable this custom physics list
services.user.LArG4Parameters.UseCustomPhysics: true

# disable cerenkov light

services.user.DetectorPropertiesService.EnableCerenkovLight: true



