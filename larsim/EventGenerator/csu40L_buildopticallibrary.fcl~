#include "services.fcl"
#include "largeantmodules.fcl"
#include "opticaldetectormodules.fcl"
#include "lightsource.fcl"


process_name: LibraryBuild


services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "PhotonLibraryFile_csu40L.root" }
  Timing:       {}
  RandomNumberGenerator: {} #ART native random number generator
  user:         @local::csu40L_simulation_services  # defined in services.fcl
}


#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   2           # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

physics:
{

 producers:
 {
   generator: @local::standard_lightsource	      # defined in lightsource.fcl  
   largeant:  @local::standard_largeant	  
 }

 analyzers:
 {
   pmtresponse: @local::standard_simphotoncounter    # defined in opticaldetectormodules.fcl
 }

 # define any desired paths
 simulate: [ generator, largeant ] 
 analyzeIt:  [ pmtresponse ]

 trigger_paths: [simulate] 
 end_paths:     [analyzeIt, stream1]  
}

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "csu40L_build.root" #default file name, can override from command line with -o or --output
 }
}

# For now, change parameters here.
# Once a definite parameter set evolves, we can define 
#  it in the included fcl PROLOGs 


##### Parameter changes for simulation services #####

# Use the build pset, with BuildLibraryFile set to true.
# Use cryo boundary
services.user.PhotonVisibilityService: @local::standard_photonvisibilityservice_buildlib
                                       # included in photpropservices.fcl from services.fcl
services.user.PhotonVisibilityService.UseCryoBoundary: true

# IF UseCryoBoundary is set to false, so use the following parameters. 
services.user.PhotonVisibilityService.XMin:  0.
services.user.PhotonVisibilityService.XMax:  0.
services.user.PhotonVisibilityService.YMin:  0.
services.user.PhotonVisibilityService.YMax:  0.
services.user.PhotonVisibilityService.ZMin:  0.
services.user.PhotonVisibilityService.ZMax:  0.

# Number of voxels
services.user.PhotonVisibilityService.NX: 0
services.user.PhotonVisibilityService.NY: 0
services.user.PhotonVisibilityService.NZ: 0


services.user.BackTracker: ""
services.user.LArFFT: ""

# set quantum efficiency supressed scint yield to 0.03 * 24000 
<<<<<<< HEAD:EventGenerator/csu40L_buildopticallibrary.fcl
services.user.LArPropertiesService.ScintYield: 72
=======
services.user.DetectorPropertiesService.ScintYield: 72
>>>>>>> origin/develop:larsim/EventGenerator/csu40L_buildopticallibrary.fcl

# enable optical physics in LArG4
services.user.LArG4Parameters.EnabledPhysics: [ "Em", 
						"Optical", 
						"SynchrotronAndGN", 
						"Ion", 
						"Hadron", 
						"Decay", 
						"HadronElastic", 
						"Stopping", 
						"NeutronTrackingCut" ]

# enable this custom physics list
services.user.LArG4Parameters.UseCustomPhysics: true



##### Parameter changes for the generator (lightsource) #####

# do not allow lightsource to write output into root file
physics.producers.generator.FillTree: false


##### Parameter changes for the pmt respnse analyzer (simphotoncounter) #####

physics.analyzers.pmtresponse.MakeAllPhotonsTree: false
physics.analyzers.pmtresponse.MakeDetectedPhotonsTree: false
physics.analyzers.pmtresponse.MakeSimPhotonssTree: false
physics.analyzers.pmtresponse.MakeEventsTree: false
