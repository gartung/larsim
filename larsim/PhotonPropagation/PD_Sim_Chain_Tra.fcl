#include "services_dune.fcl"
#include "largeantmodules_dune.fcl"
#include "photpropservices_dune.fcl"
#include "opticaldetectormodules_dune.fcl"

process_name: PDSIMCHAINTRA

services:
{
    //Load the service that manages root files for histograms.
    TFileService:            { fileName: "pd_tra.root" }
    TimeTracker:             {}
    MemoryTracker:           {}
    RandomNumberGenerator: {} #ART native random number generator
    message:                 @local::standard_info
    @table::protodune_simulation_services

    DetectorHolder:        {}
    ActionHolder:          {}
    PhysicsListHolder:     {} 
    
    PhysicsList:
    { 
        PhysicsListName: "QGSP_BERT"
        DumpList:                    true
        enableCerenkov:              false
        enableScintillation:         true
        ScintillationByParticleType: false
        enableAbsorption:            false
        enableRayleigh:              false
        enableMieHG:                 false
        enableBoundary:              false
        enableWLS:                   false
    }
    
    LArG4Detector : 
    {
        category:      "world"
        gdmlFileName_ : "protodune_v5_refactored_nowires.gdml"
    }
    
    MCTruthEventAction: {service_type: "MCTruthEventActionService"}
    ParticleListAction: {service_type: "ParticleListActionService"}
}
services.PhotonVisibilityService:                              @local::protodunev4_photonvisibilityservice
services.LArG4Parameters.FillSimEnergyDeposits:                true
services.LArG4Parameters.UseLitePhotons:                       true
services.LArG4Parameters.IonAndScintCalculator:                "NEST"

//source is now a root file
source:
{
    module_type: RootInput
    maxEvents:    30000
    fileNames:    ["muon.root"]
}

//Define and configure some modules to do work on each event.
//First modules are defined; they are scheduled later.
//Modules are grouped by type.
physics:
{

    producers:
    {
        largeant:  @local::standard_largeant
        rns:       { module_type: "RandomNumberSaver" }
    }
    
    analyzers:
    {        
        SimPh:
        {
            module_type:             "SimPhotonCounter"
            Verbosity:               1
            InputModule:             "largeant" 
            MakeAllPhotonsTree:      true
            MakeDetectedPhotonsTree: true
            MakeOpDetsTree:          true
            MakeOpDetEventsTree:     true
        }
    }
    //define the producer and filter modules for this path, order matters, 
    //filters reject all following items.  see lines starting physics.producers below
    simulate:       [ rns, largeant ]
    
    #define the output stream, there could be more than one if using filters 
    stream1:        [ out1, SimPh ]
    
    //trigger_paths is a keyword and contains the paths that modify the art::event, 
    //ie filters and producers
    trigger_paths: [simulate] 
    
    //end_paths is a keyword and contains the paths that do not modify the art::Event, 
    //ie analyzers and output streams.  these all run simultaneously
    end_paths:      [stream1]  
}
physics.producers.largeant.ChargeRecoveryMargin: 2.5 # cm

//block to define where the output goes.  if you defined a filter in the physics
//block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
//entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
    out1:
    {
        module_type:      RootOutput
        fileName:         "%ifb_pd_tra.root"
        dataTier:         "simulated"
        compressionLevel: 1
    }
}
